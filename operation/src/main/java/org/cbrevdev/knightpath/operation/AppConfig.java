package org.cbrevdev.knightpath.operation;

import lombok.extern.slf4j.Slf4j;
import org.cbrevdev.knightpath.common.entity.KnightMove;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableAsync;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.utils.StringUtils;

import java.net.URI;

@Configuration
@EnableAsync
@Slf4j
public class AppConfig {
    @Value("${amazon.dynamodb.tablename-prefix}")
    private String tableNamePrefix;

    @Value("${amazon.dynamodb.tablename-suffix}")
    private String tableNameSuffix;

    @Value("${amazon.dynamodb.region}")
    private String region;

    @Value("${amazon.dynamodb.endpoint}")
    private String amazonDynamoDBEndpoint;

    @Value("${amazon.dynamodb.accesskey}")
    private String amazonAWSAccessKey;

    @Value("${amazon.dynamodb.secretkey}")
    private String amazonAWSSecretKey;

    @Bean
    public DynamoDbClient getDynamoDbClient() {
        log.info("Creating DynamoDbClient for {}", (tableNamePrefix + KnightMove.TABLE_NAME + tableNameSuffix));

        if (!StringUtils.isBlank(amazonAWSAccessKey) && !StringUtils.isBlank(amazonAWSSecretKey) ) {
            AwsBasicCredentials credentials = AwsBasicCredentials.create(amazonAWSAccessKey, amazonAWSSecretKey);
            StaticCredentialsProvider credentialsProvider = StaticCredentialsProvider.create(credentials);
            return DynamoDbClient.builder()
                    .endpointOverride(URI.create(amazonDynamoDBEndpoint))
                    .region(Region.of(region))
                    .httpClient(UrlConnectionHttpClient.create())
                    .credentialsProvider(credentialsProvider).build();
        }

        return DynamoDbClient.builder()
                .region(Region.of(region))
                .build();
    }

    @Bean
    public DynamoDbEnhancedClient getDynamoDbEnhancedClient() {
        return DynamoDbEnhancedClient.builder()
                .extensions(AutoGeneratedTimestampRecordExtension.create())
                .dynamoDbClient(getDynamoDbClient())
                .build();
    }
}
